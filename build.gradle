buildscript {
	ext { springBootVersion = '1.3.0.M5' }
	repositories { 
	   mavenCentral()
	   maven { url "https://repo.spring.io/milestone" }
       maven { url "https://repo.spring.io/snapshot" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:0.4.1.RELEASE")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'announce'


dependencyManagement {
	imports { mavenBom 'org.springframework.cloud:spring-cloud-starter-parent:1.0.0.RELEASE' }
}

jar { baseName = 'service-gateway' }

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories { 
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
}


dependencies {
	compile("org.springframework.boot:spring-boot-starter-data-elasticsearch")
	compile("org.springframework.boot:spring-boot-starter-mustache")
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.boot:spring-boot-starter-security")
	compile("org.springframework.boot:spring-boot-starter-hateoas")
	compile 'com.goldmansachs:gs-collections:6.2.0'
	compile("org.eclipse.jdt:org.eclipse.jdt.annotation:2.0.0")
	
	compile 'org.apache.shiro:shiro-web:1.2.3'
	
	compile("com.fasterxml.jackson.core:jackson-core:2.5.1")
	compile('com.fasterxml.jackson.core:jackson-annotations:2.5.1')

	compile('org.apache.httpcomponents:httpasyncclient:4.0.2')
	compile('commons-codec:commons-codec:1.10')
	
	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile "info.cukes:cucumber-java:1.2.2","info.cukes:cucumber-junit:1.2.2","info.cukes:cucumber-spring:1.2.2"

	testCompile 'org.seleniumhq.selenium:selenium-java:2.45.0'
	
	// so we can generate self signed certs
	testCompile 'org.bouncycastle:bcpkix-jdk15on:1.52'
	
}


eclipse {
	classpath {
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
	}
}

task wrapper(type: Wrapper) { gradleVersion = '2.6' }

test {
	ext.outputDir = "${buildDir}/test-results"
	outputs.dir file(outputDir)
	systemProperties 'cucumber.options':  "--plugin json:${outputDir}/cucumber.json --plugin html:${outputDir}/html --plugin junit:${outputDir}/TEST-cucumber.xml"
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        announce.announce("':${task.name}' FAILED", "local")
    }
    else {
        announce.announce("':${task.name}' succeeded", "local")
    }
}
